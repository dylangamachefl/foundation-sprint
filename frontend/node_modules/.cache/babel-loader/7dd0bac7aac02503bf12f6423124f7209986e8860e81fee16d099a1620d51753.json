{"ast":null,"code":"const API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nclass SprintAPI {\n  async startSprint(productIdea) {\n    const response = await fetch(`${API_BASE}/sprint/start`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        productIdea\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to start sprint: ${response.statusText}`);\n    }\n    return response.json();\n  }\n  async getStatus(sprintId) {\n    const response = await fetch(`${API_BASE}/sprint/${sprintId}/status`);\n    if (!response.ok) {\n      throw new Error(`Failed to get status: ${response.statusText}`);\n    }\n    return response.json();\n  }\n  async submitResearch(sprintId, researchData) {\n    const response = await fetch(`${API_BASE}/sprint/${sprintId}/research`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        researchData\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to submit research: ${response.statusText}`);\n    }\n    return response.json();\n  }\n  async makeDecisions(sprintId, decisions) {\n    const response = await fetch(`${API_BASE}/sprint/${sprintId}/decisions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        decisions\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to make decisions: ${response.statusText}`);\n    }\n    return response.json();\n  }\n  async getResults(sprintId) {\n    const response = await fetch(`${API_BASE}/sprint/${sprintId}/results`);\n    if (!response.ok) {\n      throw new Error(`Failed to get results: ${response.statusText}`);\n    }\n    return response.json();\n  }\n}\nexport const sprintAPI = new SprintAPI();","map":{"version":3,"names":["API_BASE","process","env","REACT_APP_API_URL","SprintAPI","startSprint","productIdea","response","fetch","method","headers","body","JSON","stringify","ok","Error","statusText","json","getStatus","sprintId","submitResearch","researchData","makeDecisions","decisions","getResults","sprintAPI"],"sources":["C:/Users/Dylan/Projects/ai-portfolio/foundation-sprint/frontend/src/services/api.js"],"sourcesContent":["const API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nclass SprintAPI {\n  async startSprint(productIdea) {\n    const response = await fetch(`${API_BASE}/sprint/start`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ productIdea })\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to start sprint: ${response.statusText}`);\n    }\n    \n    return response.json();\n  }\n\n  async getStatus(sprintId) {\n    const response = await fetch(`${API_BASE}/sprint/${sprintId}/status`);\n    \n    if (!response.ok) {\n      throw new Error(`Failed to get status: ${response.statusText}`);\n    }\n    \n    return response.json();\n  }\n\n  async submitResearch(sprintId, researchData) {\n    const response = await fetch(`${API_BASE}/sprint/${sprintId}/research`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ researchData })\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to submit research: ${response.statusText}`);\n    }\n    \n    return response.json();\n  }\n\n  async makeDecisions(sprintId, decisions) {\n    const response = await fetch(`${API_BASE}/sprint/${sprintId}/decisions`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ decisions })\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to make decisions: ${response.statusText}`);\n    }\n    \n    return response.json();\n  }\n\n  async getResults(sprintId) {\n    const response = await fetch(`${API_BASE}/sprint/${sprintId}/results`);\n    \n    if (!response.ok) {\n      throw new Error(`Failed to get results: ${response.statusText}`);\n    }\n    \n    return response.json();\n  }\n}\n\nexport const sprintAPI = new SprintAPI();"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAE7E,MAAMC,SAAS,CAAC;EACd,MAAMC,WAAWA,CAACC,WAAW,EAAE;IAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,QAAQ,eAAe,EAAE;MACvDS,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEP;MAAY,CAAC;IACtC,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2BR,QAAQ,CAACS,UAAU,EAAE,CAAC;IACnE;IAEA,OAAOT,QAAQ,CAACU,IAAI,CAAC,CAAC;EACxB;EAEA,MAAMC,SAASA,CAACC,QAAQ,EAAE;IACxB,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,QAAQ,WAAWmB,QAAQ,SAAS,CAAC;IAErE,IAAI,CAACZ,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyBR,QAAQ,CAACS,UAAU,EAAE,CAAC;IACjE;IAEA,OAAOT,QAAQ,CAACU,IAAI,CAAC,CAAC;EACxB;EAEA,MAAMG,cAAcA,CAACD,QAAQ,EAAEE,YAAY,EAAE;IAC3C,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,QAAQ,WAAWmB,QAAQ,WAAW,EAAE;MACtEV,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEQ;MAAa,CAAC;IACvC,CAAC,CAAC;IAEF,IAAI,CAACd,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8BR,QAAQ,CAACS,UAAU,EAAE,CAAC;IACtE;IAEA,OAAOT,QAAQ,CAACU,IAAI,CAAC,CAAC;EACxB;EAEA,MAAMK,aAAaA,CAACH,QAAQ,EAAEI,SAAS,EAAE;IACvC,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,QAAQ,WAAWmB,QAAQ,YAAY,EAAE;MACvEV,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEU;MAAU,CAAC;IACpC,CAAC,CAAC;IAEF,IAAI,CAAChB,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6BR,QAAQ,CAACS,UAAU,EAAE,CAAC;IACrE;IAEA,OAAOT,QAAQ,CAACU,IAAI,CAAC,CAAC;EACxB;EAEA,MAAMO,UAAUA,CAACL,QAAQ,EAAE;IACzB,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,QAAQ,WAAWmB,QAAQ,UAAU,CAAC;IAEtE,IAAI,CAACZ,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0BR,QAAQ,CAACS,UAAU,EAAE,CAAC;IAClE;IAEA,OAAOT,QAAQ,CAACU,IAAI,CAAC,CAAC;EACxB;AACF;AAEA,OAAO,MAAMQ,SAAS,GAAG,IAAIrB,SAAS,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}