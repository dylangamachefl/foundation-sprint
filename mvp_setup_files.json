// ===== PACKAGE.JSON FILES =====

// backend/package.json
{
  "name": "foundation-sprint-api",
  "version": "1.0.0",
  "description": "Foundation Sprint MVP API with Gemini AI",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": ["foundation-sprint", "ai", "product-strategy", "gemini"],
  "author": "",
  "license": "MIT",
  "dependencies": {
    "@google/generative-ai": "^0.2.1",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "uuid": "^9.0.1"
  },
  "devDependencies": {
    "nodemon": "^3.0.2"
  }
}

// frontend/package.json
{
  "name": "foundation-sprint-frontend",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "proxy": "http://localhost:5000"
}

// ===== ENVIRONMENT CONFIGURATION =====

// backend/.env.example
# Foundation Sprint API Configuration

# Gemini AI Configuration
GEMINI_API_KEY=your_gemini_api_key_here

# Server Configuration
PORT=5000
NODE_ENV=development

# Optional: Enable request logging
LOG_LEVEL=info

// frontend/.env.example
# Frontend Configuration

# API URL (use for production deployment)
# REACT_APP_API_URL=https://your-api-domain.com/api

# For local development, this is handled by the proxy in package.json

// ===== SETUP SCRIPTS =====

// setup.sh (Unix/Linux/Mac)
#!/bin/bash

echo "🚀 Setting up Foundation Sprint MVP..."

# Check if Node.js is installed
if ! command -v node &> /dev/null; then
    echo "❌ Node.js is not installed. Please install Node.js 16+ first."
    exit 1
fi

# Check if npm is installed
if ! command -v npm &> /dev/null; then
    echo "❌ npm is not installed. Please install npm first."
    exit 1
fi

echo "✅ Node.js and npm found"

# Create project structure
echo "📁 Creating project structure..."
mkdir -p foundation-sprint-mvp/{backend,frontend}
cd foundation-sprint-mvp

# Setup backend
echo "🔧 Setting up backend..."
cd backend
npm init -y
npm install @google/generative-ai cors dotenv express uuid
npm install --save-dev nodemon

# Create basic server structure
mkdir -p services
echo "const express = require('express');
const cors = require('cors');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 5000;

app.use(cors());
app.use(express.json());

app.get('/api/health', (req, res) => {
  res.json({ status: 'ok', message: 'Foundation Sprint API is running' });
});

app.listen(PORT, () => {
  console.log(\`🚀 Foundation Sprint API running on port \${PORT}\`);
});" > server.js

# Create environment file
echo "GEMINI_API_KEY=your_gemini_api_key_here
PORT=5000
NODE_ENV=development" > .env.example

echo "🔑 Don't forget to copy .env.example to .env and add your Gemini API key!"

# Setup frontend
echo "🎨 Setting up frontend..."
cd ../frontend
npx create-react-app . --template typescript

# Add proxy to package.json for development
npm install

echo "✅ Setup complete!"
echo ""
echo "📋 Next steps:"
echo "1. Get a Gemini API key from https://makersuite.google.com/app/apikey"
echo "2. Copy backend/.env.example to backend/.env"
echo "3. Add your Gemini API key to backend/.env"
echo "4. Run 'npm run dev' in the backend directory"
echo "5. Run 'npm start' in the frontend directory"
echo ""
echo "🌟 Your Foundation Sprint MVP will be ready to use!"

// setup.bat (Windows)
@echo off
echo 🚀 Setting up Foundation Sprint MVP...

REM Check if Node.js is installed
node --version >nul 2>&1
if %errorlevel% neq 0 (
    echo ❌ Node.js is not installed. Please install Node.js 16+ first.
    pause
    exit /b 1
)

REM Check if npm is installed
npm --version >nul 2>&1
if %errorlevel% neq 0 (
    echo ❌ npm is not installed. Please install npm first.
    pause
    exit /b 1
)

echo ✅ Node.js and npm found

REM Create project structure
echo 📁 Creating project structure...
mkdir foundation-sprint-mvp\backend
mkdir foundation-sprint-mvp\frontend
cd foundation-sprint-mvp

REM Setup backend
echo 🔧 Setting up backend...
cd backend
call npm init -y
call npm install @google/generative-ai cors dotenv express uuid
call npm install --save-dev nodemon

mkdir services

REM Create basic server file
echo const express = require('express'); > server.js
echo const cors = require('cors'); >> server.js
echo require('dotenv').config(); >> server.js
echo. >> server.js
echo const app = express(); >> server.js
echo const PORT = process.env.PORT ^|^| 5000; >> server.js
echo. >> server.js
echo app.use(cors()); >> server.js
echo app.use(express.json()); >> server.js
echo. >> server.js
echo app.get('/api/health', (req, res) =^> { >> server.js
echo   res.json({ status: 'ok', message: 'Foundation Sprint API is running' }); >> server.js
echo }); >> server.js
echo. >> server.js
echo app.listen(PORT, () =^> { >> server.js
echo   console.log(`🚀 Foundation Sprint API running on port ${PORT}`); >> server.js
echo }); >> server.js

REM Create environment file
echo GEMINI_API_KEY=your_gemini_api_key_here > .env.example
echo PORT=5000 >> .env.example
echo NODE_ENV=development >> .env.example

echo 🔑 Don't forget to copy .env.example to .env and add your Gemini API key!

REM Setup frontend
echo 🎨 Setting up frontend...
cd ..\frontend
call npx create-react-app . --template typescript
call npm install

echo ✅ Setup complete!
echo.
echo 📋 Next steps:
echo 1. Get a Gemini API key from https://makersuite.google.com/app/apikey
echo 2. Copy backend\.env.example to backend\.env
echo 3. Add your Gemini API key to backend\.env
echo 4. Run 'npm run dev' in the backend directory
echo 5. Run 'npm start' in the frontend directory
echo.
echo 🌟 Your Foundation Sprint MVP will be ready to use!
pause

// ===== README FILES =====

// README.md
# Foundation Sprint MVP with Gemini AI

An AI-powered Foundation Sprint implementation that helps startup founders validate and refine their product ideas in 2-3 hours instead of 2 days.

## 🚀 Features

- **AI-Powered Analysis**: 3 specialized AI agents analyze your product idea
- **Research Integration**: Manual research input with AI guidance
- **Decision Support**: AI-assisted strategic decision making
- **Founding Hypothesis**: Auto-generated, testable product hypothesis
- **Export Results**: Save your sprint results as JSON

## 🛠️ Tech Stack

**Backend:**
- Node.js + Express
- Google Gemini AI API
- In-memory storage (for MVP)

**Frontend:**
- React 18
- Vanilla CSS
- Fetch API for backend communication

## 📋 Prerequisites

- Node.js 16+ 
- npm or yarn
- Gemini API key ([Get one here](https://makersuite.google.com/app/apikey))

## ⚡ Quick Start

### Option 1: Automated Setup (Recommended)

**Unix/Linux/Mac:**
```bash
chmod +x setup.sh
./setup.sh
```

**Windows:**
```batch
setup.bat
```

### Option 2: Manual Setup

1. **Clone and setup backend:**
   ```bash
   mkdir foundation-sprint-mvp && cd foundation-sprint-mvp
   mkdir backend && cd backend
   npm init -y
   npm install @google/generative-ai cors dotenv express uuid
   npm install --save-dev nodemon
   ```

2. **Create environment file:**
   ```bash
   cp .env.example .env
   # Add your Gemini API key to .env
   ```

3. **Setup frontend:**
   ```bash
   cd ../frontend
   npx create-react-app . --template typescript
   npm install
   ```

## 🔧 Configuration

1. **Get Gemini API Key:**
   - Visit [Google AI Studio](https://makersuite.google.com/app/apikey)
   - Create a new API key
   - Copy the key

2. **Configure Backend:**
   ```env
   GEMINI_API_KEY=your_actual_api_key_here
   PORT=5000
   NODE_ENV=development
   ```

## 🏃‍♂️ Running the Application

1. **Start Backend:**
   ```bash
   cd backend
   npm run dev
   ```

2. **Start Frontend** (in a new terminal):
   ```bash
   cd frontend
   npm start
   ```

3. **Access Application:**
   - Open http://localhost:3000
   - Backend API: http://localhost:5000

## 📱 How to Use

1. **Product Idea Input** (10 min)
   - Enter your product name and description
   - Add target market and problem statement
   - Provide initial solution concept

2. **AI Analysis** (30 min)
   - Watch AI agents analyze your idea
   - Facilitator structures the sprint
   - Customer Research analyzes market fit
   - Product Strategy evaluates feasibility

3. **Research Phase** (60 min)
   - Review AI-generated research requests
   - Conduct manual research using provided guidance
   - Input findings into the system

4. **Decision Making** (30 min)
   - Review updated AI insights
   - Make strategic decisions with AI guidance
   - Choose target customer, differentiation, approach

5. **Results** (15 min)
   - Get your founding hypothesis
   - Review key assumptions to test
   - Export results for future reference

## 🎯 Example Product Ideas to Test

- **AI Task Manager**: "Smart task prioritization app using AI"
- **Remote Team Tool**: "Virtual office space for distributed teams"
- **Learning Platform**: "Personalized skill development platform"
- **Health Tracker**: "Predictive health monitoring device"

## 📁 Project Structure

```
foundation-sprint-mvp/
├── backend/
│   ├── services/
│   │   ├── geminiProvider.js
│   │   └── sprintAPI.js
│   ├── server.js
│   ├── package.json
│   └── .env
└── frontend/
    ├── src/
    │   ├── components/
    │   │   ├── ProductIdeaForm.jsx
    │   │   ├── SprintDashboard.jsx
    │   │   ├── ResearchPanel.jsx
    │   │   ├── DecisionMaker.jsx
    │   │   └── ResultsView.jsx
    │   ├── services/
    │   │   └── api.js
    │   ├── App.jsx
    │   ├── App.css
    │   └── index.js
    └── package.json
```

## 🔧 API Endpoints

- `POST /api/sprint/start` - Initialize new sprint
- `GET /api/sprint/:id/status` - Get sprint status
- `POST /api/sprint/:id/research` - Submit research data
- `POST /api/sprint/:id/decisions` - Make decisions
- `GET /api/sprint/:id/results` - Get final results

## 🎨 Customization

### Adding New AI Agents

1. Create new agent in `services/sprintAPI.js`:
```javascript
async _runNewAgent(productIdea) {
  const systemPrompt = `You are a [role] expert...`;
  const prompt = `Analyze this product...`;
  const response = await this.gemini.generateResponse(prompt, systemPrompt);
  return this.gemini.parseJsonResponse(response);
}
```

2. Add to agent processing pipeline
3. Update frontend to display new insights

### Modifying AI Prompts

Edit the system prompts in `sprintAPI.js` to customize agent behavior:
- `_runFacilitatorAgent()` - Sprint facilitation
- `_runCustomerResearchAgent()` - Customer insights
- `_runProductStrategyAgent()` - Technical strategy

### Styling Changes

Modify `src/App.css` to customize the UI:
- Color scheme: Update CSS custom properties
- Layout: Modify grid and flexbox styles
- Components: Style individual component classes

## 🚀 Deployment

### Backend (Heroku)

1. Create Heroku app:
   ```bash
   heroku create your-sprint-api
   ```

2. Set environment variables:
   ```bash
   heroku config:set GEMINI_API_KEY=your_key
   ```

3. Deploy:
   ```bash
   git push heroku main
   ```

### Frontend (Netlify)

1. Build the frontend:
   ```bash
   cd frontend && npm run build
   ```

2. Deploy build folder to Netlify

3. Set environment variable:
   ```
   REACT_APP_API_URL=https://your-sprint-api.herokuapp.com/api
   ```

## 🧪 Testing

### Backend Testing
```bash
cd backend
# Test health endpoint
curl http://localhost:5000/api/health

# Test sprint creation
curl -X POST http://localhost:5000/api/sprint/start \
  -H "Content-Type: application/json" \
  -d '{"productIdea": {"name": "Test", "description": "Test product"}}'
```

### Frontend Testing
```bash
cd frontend
npm test
```

## 📊 Cost Estimation

**Gemini API Usage:**
- ~3,000-5,000 tokens per sprint
- Approximately $0.05-0.15 per sprint
- 100 sprints ≈ $5-15/month

**Hosting (Optional):**
- Backend: Free tier (Heroku/Railway)
- Frontend: Free tier (Netlify/Vercel)

## 🤝 Contributing

1. Fork the repository
2. Create feature branch (`git checkout -b feature/amazing-feature`)
3. Commit changes (`git commit -m 'Add amazing feature'`)
4. Push to branch (`git push origin feature/amazing-feature`)
5. Open Pull Request

## 📝 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🙏 Acknowledgments

- Jake Knapp and John Zeratsky for the Foundation Sprint methodology
- Google for the Gemini AI API
- The startup community for inspiration and feedback

## 📞 Support

- 🐛 **Issues**: [GitHub Issues](https://github.com/yourusername/foundation-sprint-mvp/issues)
- 💬 **Discussions**: [GitHub Discussions](https://github.com/yourusername/foundation-sprint-mvp/discussions)
- 📧 **Email**: your.email@example.com

---

**Built with ❤️ for the startup community**